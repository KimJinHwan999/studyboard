package com.example.board.controller;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import com.example.board.dto.BoardDTO;
import com.example.board.dto.MemberDTO;
import com.example.board.mapper.BoardMapper;
import com.example.board.service.BoardService;
import com.example.board.service.PagingService;
import com.google.gson.Gson;
import com.google.gson.JsonObject;

import lombok.RequiredArgsConstructor;

@Controller
@RequiredArgsConstructor
public class HomeController {
	
	private final BoardService boardService;
	private final PagingService pagingService;
	private final BoardMapper boardMapper;

	@GetMapping("/")
	public String home(HttpSession session,
					   HttpServletResponse response,
			  		   Model model) {

		// 현재페이지
		int pgNum = 1;
		
        // 세션에 저장된 회원정보 불러오기
		MemberDTO sessionMember = (MemberDTO)session.getAttribute("loginUserSession");
		
		// 페이징 로직
		HashMap<String, Object> page = (HashMap<String, Object>) pagingService.pagingLogic(pgNum);
			
		/* 하이차트 */
		// 존재하는 게시판들을 리스트로 가져오기
		List<Long> boardNumList = boardService.selectBoardNum_();
		
		// 게시판 별로 가지고 있는 글의 갯수를 Map에 넣어주기
        Map<String, Long> hchartBoardCnt = new HashMap<>();
		for(int i = 0; i < boardNumList.size(); i++) {
	 	    hchartBoardCnt.put(String.valueOf(boardNumList.get(i)), boardService.hchartBoardCnt(boardNumList.get(i)));
		}
		 
		Gson gson = new Gson();
		JsonObject boardChartJson = gson.toJsonTree(hchartBoardCnt).getAsJsonObject();
		 
		
		// 전체 게시글 데이터 넘겨주기
		model.addAttribute("loginMember", sessionMember);
		model.addAttribute("page", page);
		model.addAttribute("boardChartJson", boardChartJson);
		
		return "index/index";

	}
	
	@GetMapping("/{pgNum}")
	public String homePaging(@CookieValue(name="loginUserIdCookie", required = false) String loginUserIdCookie,
							 @PathVariable("pgNum") int pgNum,
					   		 HttpSession session,
					   		 HttpServletResponse response,
					   		 Model model) {
		
		// 전체 페이지 리스트
		List<BoardDTO> board = boardMapper.findAllBoard();
		
		// 전체 페이지 갯수
		int totalPage = pagingService.findAllPageCnt(board);
		
		// 이전, 다음 페이지에 넣어줄 변수 만드는 메소드
		int nowPage = pagingService.nextPrevPage(pgNum, totalPage);
		
		// 페이지당 10개씩 끊어서 내보내주기 위해 변수 설정
		Long nowPageL = Long.valueOf(nowPage);
		Long firstPost = nowPageL * 10 - 10;
		Long postingCnt = 10L;
		
		// 페이지에 담길 전체 데이터 10개씩 뽑아오기
		List<BoardDTO> findData = pagingService.findData(firstPost, postingCnt);
		
		
		// 전체 페이징 메소드
		List<Integer> totalPageCnt = pagingService.paging(nowPage, totalPage);
		
		// 로그인 하지 않은 사용자면 여기로 들어옴
		if(loginUserIdCookie==null) {
			
			
			// 하이차트
			 List<Long> boardNumList = new ArrayList<>(); 
			 boardNumList = boardService.selectBoardNum_();
			
			 Map<Long, Long> hchartBoardCnt = new HashMap<>();
			 for(int i = 0; i < boardNumList.size(); i++) {
				 hchartBoardCnt.put(boardNumList.get(i), boardService.hchartBoardCnt(boardNumList.get(i)));
			 }
			 
			 Gson gson = new Gson();
			 JsonObject boardChartJson = gson.toJsonTree(hchartBoardCnt).getAsJsonObject();
			 
			 
			 
			
			
			// 전체 게시글 데이터 넘겨주기
			model.addAttribute("board", board);
			model.addAttribute("findData", findData);
			model.addAttribute("totalPageCnt", totalPageCnt);
			model.addAttribute("nowPage", nowPage);
			model.addAttribute("firstPost", firstPost);
			model.addAttribute("boardChartJson", boardChartJson);
			
			
			return "index/index";
		}
		
		// 6. 세션에 저장된 아이디와 쿠키로 불러온 아이디를 비교
		MemberDTO sessionMember = (MemberDTO)session.getAttribute("loginUserSession");
		
		// 6-1. 세션에 저장된 아이디와 쿠키에 저장된 아이디가 맞지 않다면, 세션과 쿠키를 삭제하고 로그인창으로 리다이렉트
		if(sessionMember.getMember_id() != loginUserIdCookie) {
			// 6-1-1. 세션삭제
			session.invalidate();
			
			// 6-1-2. 사용자의 컴퓨터에 저장된 쿠키의 유효시간을 0으로 지정해 loginUserIdCookie 이름의 쿠키를 삭제
			Cookie cookie = new Cookie("loginUserIdCookie",null);
			cookie.setMaxAge(0);
			response.addCookie(cookie);
			
			return "redirect:/member/signin";
		}
		
		// 하이차트
		 List<Long> boardNumList = new ArrayList<>(); 
		 boardNumList = boardService.selectBoardNum_();
		
		 Map<Long, Long> hchartBoardCnt = new HashMap<>();
		 for(int i = 0; i < boardNumList.size(); i++) {
			 hchartBoardCnt.put(boardNumList.get(i), boardService.hchartBoardCnt(boardNumList.get(i)));
		 }
		 
		 Gson gson = new Gson();
		 JsonObject boardChartJson = gson.toJsonTree(hchartBoardCnt).getAsJsonObject();
		 
		
		
		// 7. 세션에 저장된 아이디와 쿠키에 저장된 아이디가 일치하면, 세션의 담긴 정보를 이용해 뷰단에 데이터 뿌려주면 됨
		model.addAttribute("loginMember", sessionMember);
		// 전체 게시글 데이터 넘겨주기
		model.addAttribute("board", board);
		model.addAttribute("findData", findData);
		model.addAttribute("totalPageCnt", totalPageCnt);
		model.addAttribute("nowPage", nowPage);
		model.addAttribute("firstPost", firstPost);
		model.addAttribute("boardChartJson", boardChartJson);
		
		return "index/index";
	}
}
